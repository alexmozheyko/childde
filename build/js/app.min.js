"use strict";

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var userImageEl = document.getElementById('userImage');
var dropdownMenuEl = document.getElementById('accountDropdown');
var scrollToTopBtn = document.getElementById('scrollToTop');
var shortDescEls = document.getElementsByClassName('question-card__content__short-desc');
var qTopDropdownEl;
var qBottomDropdownEl;

var _iterator = _createForOfIteratorHelper(shortDescEls),
    _step;

try {
  var _loop = function _loop() {
    var elem = _step.value;
    elem.addEventListener('click', function () {
      elem.nextElementSibling.style.display = 'block';
      elem.remove();
    });
  };

  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    _loop();
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}

function generateQTopDropdownEl(x, y) {
  var xPos = x - 195;
  var yPos = y + 55 + window.scrollY;
  return "\n        <div class=\"question-card__dropdown question-dropdown\" id=\"qTopDropdown\" style=\"transform: translate3d(".concat(xPos, "px, ").concat(yPos, "px, 0px)\">\n            <div class=\"question-dropdown-wrapper\">\n                <a class=\"question-dropdown__item\">\n                    <div class=\"question-dropdown__item__icon\"><img src=\"./assets/icons/share.svg\" /></div><span>Teilen</span>\n                </a>\n                <a class=\"question-dropdown__item\">\n                    <div class=\"question-dropdown__item__icon\"><img src=\"./assets/icons/paintbrush.svg\" /></div><span>Bearbeiten</span>\n                </a>\n                <a class=\"question-dropdown__item question-dropdown__item--with-toggle\" id=\"notifyTogglerOption\">\n                    <div class=\"question-dropdown__item__toggle-wrapper\">\n                        <div>\n                            <div class=\"question-dropdown__item__icon\"><img src=\"./assets/icons/bell.svg\" /></div><span>Mitteilungen</span>\n                        </div>\n                        <label class=\"question-dropdown__item__toggle item-toggle\"><input type=\"checkbox\"/><span class=\"item-toggle__slider\"></span></label></div>\n                    <div class=\"question-dropdown__item__hint\">\n                        (Sie erhalten Mitteilungen \xFCber neue Antworten und Kommentare)\n                    </div>\n                </a>\n            </div>\n        </div>\n    ");
}

function generateQBottomDropdownEl(x, y) {
  var xPos = x - 90;
  var yPos = y - 120 + window.scrollY;
  return "\n        <div class=\"question-card__dropdown question-dropdown question-dropdown--bottom\" id=\"qBottomDropdown\" style=\"transform: translate3d(".concat(xPos, "px, ").concat(yPos, "px, 0px)\">\n            <div class=\"question-dropdown-wrapper\">\n                <a class=\"question-dropdown__item\">\n                    <div class=\"question-dropdown__item__icon\"><img src=\"./assets/icons/share.svg\" /></div><span>Teilen</span>\n                </a>\n                <a class=\"question-dropdown__item\">\n                    <div class=\"question-dropdown__item__icon\"><img src=\"./assets/icons/warning.svg\" /></div><span>Melden</span>\n                </a>\n            </div>\n        </div>\n    ");
}

function toggleQuestionNotifications() {
  var notifyToggleEl = document.getElementById('notifyTogglerOption');

  var _notifyToggleEl$query = notifyToggleEl.querySelector('input'),
      checked = _notifyToggleEl$query.checked;

  notifyToggleEl.querySelector('input').checked = !checked;
}

window.addEventListener('click', function (event) {
  if (qTopDropdownEl && !qTopDropdownEl.contains(event.target)) {
    qTopDropdownEl.remove();
  }

  if (qBottomDropdownEl && !qBottomDropdownEl.contains(event.target)) {
    qBottomDropdownEl.remove();
  }

  dropdownMenuEl.style.display = 'none';

  if (userImageEl.contains(event.target) || dropdownMenuEl.contains(event.target)) {
    dropdownMenuEl.style.display = 'block';
  }

  if (event.target.classList.contains('question-header__dropdown-icon')) {
    var _event$target$getBoun = event.target.getBoundingClientRect(),
        x = _event$target$getBoun.x,
        y = _event$target$getBoun.y;

    document.body.insertAdjacentHTML('beforeend', generateQTopDropdownEl(x, y));
    qTopDropdownEl = document.getElementById('qTopDropdown');
    qTopDropdownEl.querySelector('#notifyTogglerOption').addEventListener('click', toggleQuestionNotifications);
  }

  if (event.target.classList.contains('question-reviews__horizontal-dropdown')) {
    var _event$target$getBoun2 = event.target.getBoundingClientRect(),
        _x = _event$target$getBoun2.x,
        _y = _event$target$getBoun2.y;

    document.body.insertAdjacentHTML('beforeend', generateQBottomDropdownEl(_x, _y));
    qBottomDropdownEl = document.getElementById('qBottomDropdown');
  }
});
scrollToTopBtn.addEventListener('click', function () {
  document.body.scrollTop = 0;
  document.documentElement.scrollTop = 0;
});
"use strict";

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o) { if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) { var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var it, normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var qModal = document.getElementById('qModal');
var qCoverColors = document.getElementById('qCoverColors');
var qCoverBgColor = document.getElementById('qCoverBgColor');
var qDetailsBtn = document.getElementById('qDetailsBtn');
var qUserSelectActivator = document.getElementById('qUserSelectActivator');
var qColorBtns = document.getElementsByClassName('question-modal__color-btn');
var qModalCover = qModal.querySelector('.question-modal__cover');
var qUserSelectDropdown;
autosize(document.getElementsByTagName('textarea'));

function changeQCoverColor(targetEl) {
  var pressedColorBtn = targetEl.closest('.question-modal__color-btn');

  if (pressedColorBtn) {
    qCoverBgColor.style.backgroundColor = pressedColorBtn.style.backgroundColor;

    var _iterator = _createForOfIteratorHelper(qColorBtns),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var qColorBtn = _step.value;
        qColorBtn.firstElementChild.src = "../assets/icons/list_".concat(qColorBtn.id == 'qColorBtnWhite' ? 'black' : 'white', ".svg");
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (pressedColorBtn.id == 'qColorBtnWhite') {
      pressedColorBtn.firstElementChild.src = '../assets/icons/check_black.svg';
      qModalCover.classList.remove('question-modal__cover-white-text');
    } else {
      pressedColorBtn.firstElementChild.src = '../assets/icons/check_white.svg';
      qModalCover.classList.add('question-modal__cover-white-text');
    }
  }
}

function showQDetails() {
  var qDetailsEl = "\n        <textarea \n            class=\"question-modal__textarea question-modal__textarea--small\" \n            placeholder=\"F\xFCgen Sie gegebenenfalls eine detaillierte Beschreibung Ihrer Frage hinzu\"\n            rows=\"2\"\n        ></textarea>\n    ";
  qModalCover.insertAdjacentHTML('afterend', qDetailsEl);
  qDetailsBtn.remove();
  autosize(document.querySelectorAll('textarea'));
}

function showQAuthorDropdown() {
  var qAuthorDropdown = "\n        <div class=\"q-user-select__dropdown-wrapper\" id=\"qUserSelectDropdown\">\n            <div class=\"q-user-select__dropdown q-select-dropdown\">\n                <button class=\"q-select-dropdown__btn\">\n                    <div class=\"q-user-select__avatar\">\n                        <img src=\"./assets/images/question-vote-avatar.png\"/>\n                    </div>\n                    <span class=\"q-user-select__name\">Philip Djones</span>\n                    <div class=\"q-select-dropdown__btn__check-icon\">\n                        <img src=\"./assets/icons/check_blue.svg\"/>\n                    </div>\n                </button>\n                <button class=\"q-select-dropdown__btn\">\n                    <div class=\"q-user-select__avatar\">\n                        <img src=\"./assets/images/question-1-avatar.png\" />\n                    </div>\n                    <span class=\"q-user-select__name\">Don't use my name</span>\n                </button>\n            </div>\n        </div>\n    ";
  qUserSelectActivator.insertAdjacentHTML('afterend', qAuthorDropdown);
  setTimeout(function () {
    qUserSelectDropdown = document.getElementById('qUserSelectDropdown');
    var authorOptions = qUserSelectDropdown.querySelectorAll('.q-select-dropdown__btn');

    var _iterator2 = _createForOfIteratorHelper(authorOptions),
        _step2;

    try {
      var _loop = function _loop() {
        var authorOption = _step2.value;

        var _authorOption$childre = _slicedToArray(authorOption.children, 2),
            avatar = _authorOption$childre[0],
            name = _authorOption$childre[1];

        authorOption.addEventListener('click', function () {
          qUserSelectActivator.children[0].firstElementChild.src = avatar.firstElementChild.src;
          qUserSelectActivator.children[1].textContent = name.textContent;
        });
      };

      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
        _loop();
      }
    } catch (err) {
      _iterator2.e(err);
    } finally {
      _iterator2.f();
    }
  });
}

qModal.addEventListener('click', function (event) {
  if (qUserSelectDropdown) {
    qUserSelectDropdown.remove();
  }

  if (qCoverColors.contains(event.target)) {
    changeQCoverColor(event.target);
  } else if (qDetailsBtn.contains(event.target)) {
    showQDetails();
  } else if (qUserSelectActivator.contains(event.target)) {
    showQAuthorDropdown();
  }
});
"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var swiperParams = {
  slidesPerView: '2.8',
  spaceBetween: 20,
  freeMode: true,
  grabCursor: true
};
document.addEventListener('DOMContentLoaded', function () {
  var swiperEls = document.getElementsByClassName('base-swiper');

  for (var i = 0; i < swiperEls.length; i++) {
    swiperEls[i].querySelector('.swiper-container').classList.add("swiper-".concat(i + 1));
    swiperEls[i].querySelector('.swiper-button-prev').classList.add("btn-prev-".concat(i + 1));
    swiperEls[i].querySelector('.swiper-button-next').classList.add("btn-next-".concat(i + 1));
    var swiper = new Swiper(".swiper-".concat(i + 1), _objectSpread({}, swiperParams, {
      navigation: {
        nextEl: ".btn-next-".concat(i + 1),
        prevEl: ".btn-prev-".concat(i + 1)
      }
    }));
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,